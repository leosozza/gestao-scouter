import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Brain, ChevronDown, ChevronUp, Loader2 } from "lucide-react";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { DashboardFilters } from "./FilterPanel";

interface DashboardData {
  totalLeads: number;
  leadsComFoto: number;
  leadsConfirmadas: number;
  leadsComContato: number;
  iqsMedio: number;
}

interface AnalysisPanelProps {
  filters: DashboardFilters;
  data: DashboardData; // Dados processados para an√°lise
}

export const AnalysisPanel = ({ filters, data }: AnalysisPanelProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [analysis, setAnalysis] = useState<string>("");
  const [isGenerating, setIsGenerating] = useState(false);

  const generateAnalysis = async () => {
    setIsGenerating(true);
    
    // Simula tempo de processamento da IA
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    let analysisText = "";

    // An√°lise baseada nos filtros ativos
    if (filters.scouters.length === 1) {
      const scouter = filters.scouters[0];
      analysisText = generateScouterAnalysis(scouter, data);
    } else if (filters.projects.length === 1) {
      const project = filters.projects[0];
      analysisText = generateProjectAnalysis(project, data);
    } else {
      analysisText = generateGeneralAnalysis(data);
    }

    setAnalysis(analysisText);
    setIsGenerating(false);
    setIsOpen(true);
  };

  const generateScouterAnalysis = (scouter: string, data: DashboardData): string => {
    const performances = {
      "Carlos Ant√¥nio": {
        leads: 180,
        mediaDia: 15.0,
        diasTrabalhados: 12,
        ajudaCusto: 360,
        pagamentoFichas: 1080,
        totalReceber: 1440,
        contribuicao: 42.5
      },
      "Rafaela": {
        leads: 120,
        mediaDia: 10.0,
        diasTrabalhados: 12,
        ajudaCusto: 360,
        pagamentoFichas: 660,
        totalReceber: 1020,
        contribuicao: 35.2
      }
    };

    const perf = performances[scouter as keyof typeof performances] || performances["Rafaela"];

    return `üìä **An√°lise de Performance - ${scouter}**

**Produtividade Geral:**
‚Ä¢ Total de leads: ${perf.leads.toLocaleString('pt-BR')} no per√≠odo
‚Ä¢ M√©dia di√°ria: ${perf.mediaDia} leads/dia
‚Ä¢ Dias trabalhados: ${perf.diasTrabalhados} dias (>20 leads/dia)
‚Ä¢ Contribui√ß√£o no projeto: ${perf.contribuicao}% das leads totais

**Remunera√ß√£o:**
‚Ä¢ Ajuda de custo: R$ ${perf.ajudaCusto.toLocaleString('pt-BR')}
‚Ä¢ Pagamento por leads: R$ ${perf.pagamentoFichas.toLocaleString('pt-BR')}
‚Ä¢ **Total a receber: R$ ${perf.totalReceber.toLocaleString('pt-BR')}**

**Recomenda√ß√µes:**
${perf.mediaDia >= 15 
  ? "‚úÖ Performance excelente! Manter ritmo atual e considerar aumentar meta individual."
  : perf.mediaDia >= 10
  ? "‚ö†Ô∏è Performance na m√©dia. Revisar estrat√©gias de capta√ß√£o para alcan√ßar 15+ leads/dia."
  : "üî¥ Performance abaixo do esperado. Necess√°rio treinamento e acompanhamento pr√≥ximo."
}

**Pr√≥ximos Passos:**
‚Ä¢ Analisar hor√°rios de maior produtividade
‚Ä¢ Identificar melhores pr√°ticas nos dias de alta performance
‚Ä¢ Definir metas semanais para manter consist√™ncia`;
  };

  const generateProjectAnalysis = (project: string, data: DashboardData): string => {
    const projectData = {
      "SELETIVA SANTO ANDR√â-ABC": {
        meta: 2500,
        leadsAtuais: 275,
        percentMeta: 11.0,
        esperadoHoje: 387,
        delta: -112,
        status: "atraso",
        ritmoNecessario: 18,
        topScouters: ["Carlos Ant√¥nio (180)", "Jo√£o Silva (50)", "Ana Paula (45)"]
      },
      "SELETIVA S√ÉO CARLOS": {
        meta: 3000,
        leadsAtuais: 230,
        percentMeta: 7.7,
        esperadoHoje: 600,
        delta: -370,
        status: "atraso-critico",
        ritmoNecessario: 25,
        topScouters: ["Rafaela (120)", "Maria Santos (110)"]
      }
    };

    const proj = projectData[project as keyof typeof projectData] || projectData["SELETIVA SANTO ANDR√â-ABC"];

    return `üéØ **An√°lise de Projeto - ${project}**

**Status da Meta:**
‚Ä¢ Meta total: ${proj.meta.toLocaleString('pt-BR')} leads
‚Ä¢ Leads captadas: ${proj.leadsAtuais.toLocaleString('pt-BR')} (${proj.percentMeta}% da meta)
‚Ä¢ Esperado at√© hoje: ${proj.esperadoHoje.toLocaleString('pt-BR')}
‚Ä¢ Delta: ${proj.delta} leads (${proj.status === "atraso" ? "üî¥ Atraso" : "üî¥ Atraso Cr√≠tico"})

**Proje√ß√£o e Riscos:**
‚Ä¢ Ritmo necess√°rio: **${proj.ritmoNecessario} leads/dia** para atingir meta no prazo
‚Ä¢ Status atual: ${proj.status === "atraso-critico" ? "RISCO ALTO de n√£o atingir meta" : "Recupera√ß√£o poss√≠vel com esfor√ßo concentrado"}

**Top Performers:**
${proj.topScouters.map(s => `‚Ä¢ ${s}`).join('\n')}

**Recomenda√ß√µes Urgentes:**
1. **Redistribuir equipe**: Focar scouters de alta performance neste projeto
2. **Intensificar capta√ß√£o**: Aumentar jornada nos pr√≥ximos 5 dias √∫teis
3. **Revisar estrat√©gias**: Analisar canais de capta√ß√£o mais eficazes
4. **Monitoramento di√°rio**: Acompanhar progresso a cada 24h

**Cen√°rio What-If:**
‚Ä¢ Com +10% no ritmo atual: ${Math.round(proj.meta * 0.85).toLocaleString('pt-BR')} leads (85% da meta)
‚Ä¢ Necess√°rio: Acelerar capta√ß√£o em 40% para recuperar atraso`;
  };

  const generateGeneralAnalysis = (data: DashboardData): string => {
    return `üìà **Vis√£o Geral do Dashboard**

**Performance da Equipe:**
‚Ä¢ Total de scouters ativos: 5
‚Ä¢ Total de leads no per√≠odo: 585
‚Ä¢ M√©dia geral: 12.3 leads/dia por scouter
‚Ä¢ Projetos em andamento: 3

**Ranking de Performance:**
1. Carlos Ant√¥nio - 180 leads (alta performance) ‚≠ê
2. Rafaela - 120 leads (performance est√°vel)
3. Maria Santos - 110 leads (performance est√°vel) 
4. Jo√£o Silva - 95 leads (performance vari√°vel)
5. Ana Paula - 80 leads (requer aten√ß√£o) ‚ö†Ô∏è

**Status dos Projetos:**
‚Ä¢ SELETIVA SANTO ANDR√â-ABC: 11% da meta (atraso moderado)
‚Ä¢ SELETIVA S√ÉO CARLOS: 7.7% da meta (atraso cr√≠tico) üî¥
‚Ä¢ AG√äNCIA DIGITAL SP: 8.7% da meta (dentro do cronograma)

**Insights e A√ß√µes:**
‚Ä¢ **Concentra√ß√£o 80/20**: Carlos Ant√¥nio representa 31% da produ√ß√£o total
‚Ä¢ **Projeto cr√≠tico**: S√£o Carlos precisa de interven√ß√£o imediata
‚Ä¢ **Oportunidade**: Ana Paula tem potencial subutilizado (projeto com maior valor/ficha)

**Recomenda√ß√µes Estrat√©gicas:**
1. Replicar pr√°ticas do Carlos Ant√¥nio para outros scouters
2. Realocar recursos para projeto S√£o Carlos urgentemente
3. Implementar programa de mentoria scouter-scouter
4. Revisar metas individuais baseado em performance hist√≥rica`;
  };

  return (
    <Card className="border-primary/20">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5 text-primary" />
            An√°lise Inteligente
          </CardTitle>
          <Button 
            onClick={generateAnalysis} 
            disabled={isGenerating}
            className="gap-2"
          >
            {isGenerating ? (
              <>
                <Loader2 className="w-4 h-4 animate-spin" />
                Gerando...
              </>
            ) : (
              "Gerar An√°lise"
            )}
          </Button>
        </div>
      </CardHeader>

      {analysis && (
        <CardContent>
          <Collapsible open={isOpen} onOpenChange={setIsOpen}>
            <CollapsibleTrigger asChild>
              <Button variant="outline" className="w-full justify-between">
                <span className="flex items-center gap-2">
                  <Brain className="w-4 h-4 text-primary" />
                  Observa√ß√£o de An√°lise
                </span>
                {isOpen ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
              </Button>
            </CollapsibleTrigger>
            <CollapsibleContent className="mt-4">
              <Alert>
                <AlertDescription className="whitespace-pre-line text-sm leading-relaxed">
                  {analysis}
                </AlertDescription>
              </Alert>
            </CollapsibleContent>
          </Collapsible>
        </CardContent>
      )}
    </Card>
  );
};