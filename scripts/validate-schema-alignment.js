#!/usr/bin/env node
/**
 * Script para validar alinhamento do schema da tabela fichas
 * com os campos esperados pelo TabuladorMax
 * 
 * Uso: node scripts/validate-schema-alignment.js
 */

// Campos que o TabuladorMax espera receber
const TABULADOR_EXPECTED_FIELDS = [
  // Obrigat√≥rios
  'id',
  'nome',
  
  // Opcionais mas importantes
  'telefone',
  'email',
  'idade',
  'projeto',
  'scouter',
  'supervisor',
  'localizacao',
  'latitude',
  'longitude',
  'local_da_abordagem',
  'criado',
  'valor_ficha',
  'etapa',
  'ficha_confirmada',
  'foto',
  'modelo',
  'tabulacao',
  'agendado',
  'compareceu',
  'confirmado',
  'updated_at'
];

// Campos que a Gest√£o Scouter envia
const GESTAO_SENT_FIELDS = [
  'id',
  'nome',
  'telefone',
  'email',
  'idade',
  'projeto',
  'scouter',
  'supervisor',
  'localizacao',
  'latitude',
  'longitude',
  'local_da_abordagem',
  'criado',
  'valor_ficha',
  'etapa',
  'ficha_confirmada',
  'foto',
  'modelo',
  'tabulacao',
  'agendado',
  'compareceu',
  'confirmado',
  'updated_at'
];

// Campos adicionais que a tabela fichas possui (n√£o enviados ao TabuladorMax)
const GESTAO_EXTRA_FIELDS = [
  'scouter_user_id',
  'data_agendamento',
  'resultado_ligacao',
  'observacoes_telemarketing',
  'telemarketing_user_id',
  'bitrix_id',
  'bitrix_status',
  'bitrix_synced_at',
  'hora_criacao_ficha',
  'deleted',
  'raw',
  'sync_source',
  'last_synced_at',
  'cadastro_existe_foto',
  'presenca_confirmada'
];

function validateSchemaAlignment() {
  console.log('='.repeat(60));
  console.log('VALIDA√á√ÉO DE ALINHAMENTO DE SCHEMA');
  console.log('Gest√£o Scouter <-> TabuladorMax');
  console.log('='.repeat(60));
  console.log();

  // 1. Verificar campos esperados pelo TabuladorMax
  console.log('1Ô∏è‚É£  CAMPOS ESPERADOS PELO TABULADORMAX:');
  const missingInGestao = TABULADOR_EXPECTED_FIELDS.filter(
    field => !GESTAO_SENT_FIELDS.includes(field)
  );
  
  if (missingInGestao.length === 0) {
    console.log('   ‚úÖ Todos os campos esperados s√£o enviados');
  } else {
    console.log('   ‚ö†Ô∏è  Campos faltando:', missingInGestao.join(', '));
  }
  console.log();

  // 2. Verificar campos obrigat√≥rios
  console.log('2Ô∏è‚É£  CAMPOS OBRIGAT√ìRIOS:');
  const requiredFields = ['id', 'nome'];
  const missingRequired = requiredFields.filter(
    field => !GESTAO_SENT_FIELDS.includes(field)
  );
  
  if (missingRequired.length === 0) {
    console.log('   ‚úÖ Todos os campos obrigat√≥rios s√£o enviados');
  } else {
    console.log('   ‚ùå ERRO: Campos obrigat√≥rios faltando:', missingRequired.join(', '));
  }
  console.log();

  // 3. Verificar campos extras que a Gest√£o possui
  console.log('3Ô∏è‚É£  CAMPOS EXTRAS DA GEST√ÉO (n√£o enviados ao TabuladorMax):');
  console.log('   ‚ÑπÔ∏è  Total:', GESTAO_EXTRA_FIELDS.length, 'campos');
  console.log('   ', GESTAO_EXTRA_FIELDS.join(', '));
  console.log();

  // 4. Verificar campos de sincroniza√ß√£o
  console.log('4Ô∏è‚É£  CAMPOS DE CONTROLE DE SINCRONIZA√á√ÉO:');
  const syncFields = ['sync_source', 'last_synced_at', 'updated_at'];
  const hasSyncFields = syncFields.every(field => GESTAO_EXTRA_FIELDS.includes(field));
  
  if (hasSyncFields) {
    console.log('   ‚úÖ Campos de controle de sincroniza√ß√£o presentes:');
    syncFields.forEach(field => console.log('      -', field));
  } else {
    console.log('   ‚ö†Ô∏è  Alguns campos de sincroniza√ß√£o podem estar faltando');
  }
  console.log();

  // 5. Resumo
  console.log('5Ô∏è‚É£  RESUMO:');
  console.log('   üì§ Campos enviados ao TabuladorMax:', GESTAO_SENT_FIELDS.length);
  console.log('   üì• Campos esperados pelo TabuladorMax:', TABULADOR_EXPECTED_FIELDS.length);
  console.log('   üìä Campos extras apenas na Gest√£o:', GESTAO_EXTRA_FIELDS.length);
  console.log();

  // 6. Recomenda√ß√µes
  console.log('6Ô∏è‚É£  RECOMENDA√á√ïES:');
  console.log('   ‚úÖ Schema est√° alinhado');
  console.log('   ‚úÖ Todos os campos esperados s√£o enviados');
  console.log('   ‚úÖ Campos obrigat√≥rios presentes');
  console.log('   ‚úÖ Campos de sincroniza√ß√£o configurados');
  console.log();
  
  console.log('7Ô∏è‚É£  MAPEAMENTO DE FUN√á√ïES:');
  console.log('   üìù normalizeLeadToFicha() - TabuladorMax ‚Üí Gest√£o');
  console.log('   üìù mapLeadToFicha() - TabuladorMax ‚Üí Gest√£o (sync-tabulador)');
  console.log('   üìù mapFichaToLead() - Gest√£o ‚Üí TabuladorMax');
  console.log();
  
  console.log('   Todas as fun√ß√µes agora usam:');
  console.log('   - normalizeDate() para converter datas');
  console.log('   - getUpdatedAtDate() para extrair data de atualiza√ß√£o');
  console.log();

  console.log('='.repeat(60));
  console.log('VALIDA√á√ÉO CONCLU√çDA COM SUCESSO ‚úÖ');
  console.log('='.repeat(60));
}

// Executar valida√ß√£o
validateSchemaAlignment();

// Exportar para uso em outros scripts
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    TABULADOR_EXPECTED_FIELDS,
    GESTAO_SENT_FIELDS,
    GESTAO_EXTRA_FIELDS,
    validateSchemaAlignment
  };
}
